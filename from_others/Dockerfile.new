FROM ubuntu:20.04

#LABEL Efa-GmbH <team@efa-gmbh.com>
LABEL https://github.com/nswarnkar/janus_docker
LABEL com.example.vendor="ACME Incorporated"
LABEL com.example.label-with-value="foo"
LABEL version="1.0"

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ Asia/Tokyo

RUN sed -i 's/archive.ubuntu.com/mirror.aarnet.edu.au\/pub\/ubuntu\/archive/g' /etc/apt/sources.list
#RUN sed -i.bak -e "s%http://archive.ubuntu.com/ubuntu/%http://ftp.jaist.ac.jp/pub/Linux/ubuntu/%g" /etc/apt/sources.list
#RUN sed -i.bak -e "s%http://[^ ]\+%http://ftp.jaist.ac.jp/pub/Linux/ubuntu/%g" /etc/apt/sources.list

# Copy installation scripts in
#COPY *.sh ./

RUN set -x \
    &&  apt-get update \
    && apt-get install -y tzdata \
    && echo "${TZ}" > /etc/timezone \
    && rm /etc/localtime \
    && ln -s /usr/share/zoneinfo/Asia/Tokyo /etc/localtime \
    && dpkg-reconfigure -f noninteractive tzdata

# base software
RUN set -x \
    #35.6Mb to 154Mb
    && apt-get install -y software-properties-common \
    && add-apt-repository ppa:apt-fast/stable \
    && apt-get install -y apt-utils apt-fast \
#   12.4 MB
#    && aptitude update \
#    && aptitude safe-upgrade \
    && echo "alias apt-get='apt-fast'" >> ~/.bashrc \
    && echo "alias aptitude='apt-fast'" >> ~/.bashrc

# Prepare the system
#RUN ./install_depends.sh #becouse this wont use cache
RUN set -x && \
    apt-fast install -y libmicrohttpd-dev libjansson-dev libnice-dev \
    libssl-dev libsofia-sip-ua-dev libglib2.0-dev \
    libopus-dev libogg-dev libini-config-dev libcollection-dev \
    pkg-config gengetopt libtool automake \
    sudo make git doxygen graphviz cmake \
    libconfig-dev libavutil-dev libavcodec-dev libavformat-dev \
    libwebsockets-dev libsrtp2-dev libusrsctp-dev

# Boringssl build section
# If you want to use the openssl instead of boringssl
# RUN apt-get update -y && apt-get install -y libssl-dev
RUN set -x && apt-fast -y update && apt-fast install -y --no-install-recommends \
#RUN set -x && apt-fast -y update && apt-fast install -y --install-suggests \
#RUN set -x && apt-fast -y update && apt-fast -o APT::Install-Suggests="true" install -y \
        g++ \
        gcc \
        libc6-dev \
#        make \
        curl wget
#    && rm -rf /var/lib/apt/lists/*
ENV GOLANG_VERSION 1.7.5
#ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_URL https://storage.googleapis.com/golang/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 2e4dd6c44f0693bef4e7b46cc701513d74c3cc44f2419bf519d7868b12931ac3
RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
    && echo "$GOLANG_DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
    && tar -C /usr/local -xzf golang.tar.gz \
    && rm golang.tar.gz

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
# https://boringssl.googlesource.com/boringssl/+/chromium-stable
#RUN git clone https://boringssl.googlesource.com/boringssl && \
RUN git clone git://github.com/google/boringssl.git && \
    cd boringssl && \
    git reset --hard c7db3232c397aa3feb1d474d63a1c4dd674b6349 && \
    sed -i s/" -Werror"//g CMakeLists.txt && \
    mkdir -p build  && \
    cd build  && \
    cmake -DCMAKE_CXX_FLAGS="-lrt" ..  && \
    make  && \
    cd ..  && \
    sudo mkdir -p /opt/boringssl  && \
    sudo cp -R include /opt/boringssl/  && \
    sudo mkdir -p /opt/boringssl/lib  && \
    sudo cp build/ssl/libssl.a /opt/boringssl/lib/  && \
    sudo cp build/crypto/libcrypto.a /opt/boringssl/lib/



# Install libsrtp 2.0.0
#RUN ./libsrtp.sh use apt-get install libsrtp2-dev

# Install usrsctp for data channel support
#RUN ./usrsctp.sh use apt-get install libusrsctp-dev

# Install rabbitmq
RUN set -x && \
    wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add - && \
    echo "deb https://packages.erlang-solutions.com/ubuntu focal contrib" | sudo tee /etc/apt/sources.list.d/rabbitmq.list && \
    echo "deb https://dl.bintray.com/rabbitmq/debian bionic main" | sudo tee /etc/apt/sources.list.d/rabbitmq.list && \
    wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | sudo apt-key add - && \
    wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add - && \
    sudo apt update && \
    sudo apt install erlang && \
    sudo apt install  -y rabbitmq-server
    #sudo systemctl enable rabbitmq-server

# Install websocket dependencies
#RUN ./websockets.sh  # use apt-get install libwebsockets-dev

# Compile & install Janus
#RUN ./install_janus.sh
# base software
RUN set -x && \
    cd ~ && \
    git clone https://github.com/meetecho/janus-gateway.git && \
    cd janus-gateway && \
    sh autogen.sh && \
    #./configure --prefix=/opt/janus --disable-rabbitmq --disable-mqtt --enable-docs
    ./configure \
    --prefix=/opt/janus \
    --enable-post-processing \
    --enable-boringssl \
    --enable-data-channels \
    --disable-rabbitmq \
    --disable-mqtt \
    --disable-unix-sockets \
    --enable-dtls-settimeout \
    --enable-plugin-echotest \
    --enable-plugin-recordplay \
    --enable-plugin-sip \
    --enable-plugin-videocall \
    --enable-plugin-voicemail \
    --enable-plugin-textroom \
    --enable-plugin-audiobridge \
    --enable-plugin-nosip \
    --enable-all-handlers && \
    make && make install && make configs

# Put configs in place
COPY conf/*.cfg /opt/janus/etc/janus/

# Declare the ports we use
EXPOSE 80 7088 8088 8188

# Define the default start-up command
CMD ./startup.sh